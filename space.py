# -*- coding: utf-8 -*-
"""space.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DONAyYyl8_AB2iexs72tG3oCxUbSHTXZ
"""

!pip install -q bitsandbytes datasets accelerate loralib
!pip install -q git+https://github.com/huggingface/transformers.git@main git+https://github.com/huggingface/peft.git
!pip install gradio

from huggingface_hub import notebook_login
notebook_login()

import gradio as gr
import torch
from peft import PeftModel, PeftConfig
from transformers import AutoModelForCausalLM, AutoTokenizer

# PEFT Modeli Yükleme
peft_model_id = "adas014/Trendsonver1"
config = PeftConfig.from_pretrained(peft_model_id)
model = AutoModelForCausalLM.from_pretrained(
    config.base_model_name_or_path,
    return_dict=True,
    load_in_4bit=True,
    device_map="auto"
)
tokenizer = AutoTokenizer.from_pretrained(config.base_model_name_or_path)
model = PeftModel.from_pretrained(model, peft_model_id)

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model.to(device)

# Desteklenen ilaçlar ve hastalıklar
valid_entries = [
    "aspirin", "parol", "ağrı kesici", "grip ilacı", "kan sulandırıcı",
    "antibiyotik", "depresyon hastası", "migren ilacı", "anestezi", "sakinleştirici",
    "barbitürat", "hipertansiyon hastası", "diyabet hastası", "kalp hastası", "astım hastası", "şeker hastası",
    "tansiyon hastası", "kanser hastası", "karaciğer hastası", "koah", "böbrek hastası", "obezite", "romatizma", "ateş düşürücü", "kas gevşetici",
    "mide koruyucu", "sinir ilacı", "kansızlık", "iltihap kurutucu", "zatürre hastası", "nezle hastası", "grip hastası", "alkol", "astım hastası", "idrar söktürücü", "ürik asit azaltıcı",
    "adrenalin", "gut hastası","antidepresan","tansiyon","alerji","hormon","potasyum takviyesi","selam","çikolata"
]

# Sadece ilaç isimleri ("hastalık" kelimesi içermeyenler) için filtreleme
valid_drugs = [entry for entry in valid_entries if "hastası" not in entry and "hastalık" not in entry]

# Değerlendirme Fonksiyonu
def evaluate_ilac_hastalik(ilac, istenilen):
    # Giriş doğrulaması
    if not ilac or not istenilen:
        return "Lütfen hem ilaç hem de hastalık bilgilerini giriniz."
    if len(ilac) > 50 or len(istenilen) > 50:
        return "Girdiğiniz bilgiler çok uzun. Lütfen daha kısa bir açıklama yapınız."

    # Doğrulama için girişin geçerli olup olmadığını kontrol edin
    if ilac.lower() not in valid_entries:
        return "Girdiğiniz ilaç veya hastalık listede bulunmuyor. Lütfen geçerli bir değer giriniz."
    if istenilen.lower() not in valid_drugs:
        return "Girdiğiniz ikinci değer desteklenen ilaç listesinde bulunmuyor. Lütfen geçerli bir ilaç giriniz."

    # Hangi türde bir etkileşim olduğunu belirlemek için kontrol yapma
    if "hastası" in ilac.lower() or "hastalık" in ilac.lower():
        # Eğer ilk giriş hastalık ile ilgiliyse, hastalık ve ilaç etkileşimi
        default_prompt = f"[INST] İlaç etkileşimlerini değerlendirerek, potansiyel sağlık risklerini açıklayın.\n {ilac}yım , {istenilen} kullanımı  hangi kronik hastalıklara neden olur?[/INST]\n"
    else:
        # Eğer ilk giriş ilaç ile ilgiliyse, ilaç etkileşimlerini değerlendir
        default_prompt = f"[INST] İlaç etkileşimlerini değerlendirerek, potansiyel sağlık risklerini açıklayın.\n {ilac} ve {istenilen} birlikte kullanımı hangi kronik hastalıklara neden olur?[/INST]\n"

    # Terminators ekleniyor


    # Tokenize etme
    inputs = tokenizer(default_prompt, return_tensors='pt').to(device)

    # Modeli kullanarak çıktı üretme
    output_tokens = model.generate(
        **inputs,
        max_new_tokens=256,




    )

    generated_answer = tokenizer.decode(output_tokens[0], skip_special_tokens=True)
    return generated_answer.replace(default_prompt, '').strip()


# Gradio Arayüzü
interface = gr.Interface(
    fn=evaluate_ilac_hastalik,
    inputs=[
        gr.Textbox(label="Kullandığınız ilaç veya hastalık durumunuzu giriniz?", placeholder="Örneğin: aspirin"),
        gr.Textbox(label="Kullanmak istediğiniz ilaç", placeholder="Örneğin: grip ilacı")
    ],
    outputs=gr.Textbox(label="Değerlendirme Sonucu", lines=10),
    title="İlaç ve Hastalık Değerlendirici",
    description="İlaç etkileşimlerini ve potansiyel sağlık risklerini değerlendiren bir araç. Yalnızca desteklenen ilaç ve hastalık isimlerini kabul eder.",
    examples=[
        ["miğren", "antidepresan"],
        ["tansiyon hastası", "grip ilacı"],
        ["tansiyon hastası", "potasyum"],
        ["idrar söktürücü", "tansiyon"],
        ["böbrek hastası", "idrar söktürücü"],
        ["kan sulandırıcı", "ağrı kesici"],
        ["astım hastası", "antibiyotik"],
        ["diyabet hastası", "ağrı kesici"]
    ]
)

# Uygulamayı Başlat
if __name__ == "__main__":
    interface.launch(debug=True)